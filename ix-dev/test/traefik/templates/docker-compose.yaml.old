# Add Commands to a variable as the set.command argument can only be used one time. 
{% set commands = namespace(x=[
  "--providers.docker=%s" | format(values.consts.commands.docker.enabled),
  "--providers.docker.exposedbydefault=%s" | format(values.consts.commands.docker.exposed),
  "--providers.docker.network=%s" | format(values.consts.commands.docker.proxy_network),
]) %}
# Add conditional commands


# EntryPoints
# Check if http proxying is enabled and add entrypoint when nessecary 
{% if values.network.http_enable %}
  {% do commands.x.append("--entryPoints.web.address=:%s" | format(values.network.http_port.port_number)) %}
{% endif %}
# Check if https proxying is enabled and add entrypoint when nessecary 
{% if values.network.https_enable %}
  {% do commands.x.append("--entryPoints.websecure.address=:%s" | format(values.network.https_port.port_number)) %}
{% endif %}
#Check if https redirection is enabled and add enable https redirection if it is 
{% if values.network.http_enable and values.network.https_enable and values.network.https_redirect %}
  {% do commands.x.append("--entrypoints.web.http.redirections.entrypoint.to=websecure") %}
  {% do commands.x.append("--entrypoints.web.http.redirections.entrypoint.scheme=https") %}
  {% do commands.x.append("--entrypoints.web.http.redirections.entrypoint.permanent=true") %}
{% endif %}

# Setup Proxy commands
# HTTP Challenge 
{% if values.proxy.challenge == "http_challenge" %}
  {% do commands.x.append("--certificatesresolvers.truenasresolver.acme.httpchallenge=true") %}
  {% do commands.x.append("--certificatesresolvers.truenasresolver.acme.httpchallenge.entrypoint=web") %}
  {% do commands.x.append("--certificatesresolvers.truenasresolver.acme.email=%s" | format(values.proxy.email)) %}
  {% do commands.x.append("--certificatesresolvers.truenasresolver.acme.storage=/letsencrypt/acme.json") %}
{% endif %}
# TLS Challenge 
{% if values.proxy.challenge == "tls_challenge" %}
  {% do commands.x.append("--certificatesresolvers.truenasresolver.acme.tlschallenge=true") %}
  {% do commands.x.append("--certificatesresolvers.truenasresolver.acme.email=%s" | format(values.proxy.email)) %}
  {% do commands.x.append("--certificatesresolvers.truenasresolver.acme.storage=/letsencrypt/acme.json") %}
{% endif %}
# DNS Challenge (Manage the big DNS providers and add capabilities for a custom DNS provider)
{% if values.proxy.challenge == "dns_challenge" %}
  {% do commands.x.append("--certificatesresolvers.truenasresolver.acme.dnschallenge=true") %}
  {% do commands.x.append("--certificatesresolvers.truenasresolver.acme.dnschallenge.provider=%s" | format(values.proxy.dns_provider)") %}
  {% do commands.x.append("--certificatesresolvers.truenasresolver.acme.email=%s" | format(values.proxy.email)") %}
  {% do commands.x.append("--certificatesresolvers.truenasresolver.acme.storage=/letsencrypt/acme.json") %}
{% endif %}

# Add all commands 
{% do traefik.set_command(commands.x) %}








# Enable webui button in truenas interface 
{% do tpl.portals.add(values.network.web_port) %}

# I believe add the notes 
{% do tpl.notes.set_body(values.consts.notes_body) %}

{{ tpl.render() | tojson }}
