{% set tpl = ix_lib.base.render.Render(values) %}

{# Create traefik container #}
{# Get name from TrueNAS UI #}
{# Get container image & tag from ix_values.yaml #}
{% set traefik = tpl.add_container(values.consts.traefik_container_name, "image") %}

{# Configure Healthcheck #}
{% do traefik.healthcheck.set_custom_test(["CMD", "traefik", "healthcheck"]) %}

{# make container privileged #}
{% do traefik.set_privileged(true) %}


{# Add Environment variables #}
{% do traefik.environment.add_env("TRAEFIK_LOG_LEVEL", "DEBUG") %}
{% do traefik.environment.add_env("TRAEFIK_PROVIDERS_DOCKER", values.consts.commands.docker.enabled) %}
{% do traefik.environment.add_env("TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT", values.consts.commands.docker.exposed) %}
{% do traefik.environment.add_env("TRAEFIK_PROVIDERS_DOCKER_NETWORK", values.consts.commands.docker.proxy_network) %}
{% do traefik.environment.add_env("TRAEFIK_SERVERSTRANSPORT.INSECURESKIPVERIFY", "true") %}

{# Add conditional environment variables #}
{# WebUI #}
{# IF WebUI is enabled: #}
{% if values.network.webui_enable %}
  {% do traefik.environment.add_env("TRAEFIK_PING", "true") %}
  {% do traefik.environment.add_env("TRAEFIK_API", "true") %}
  {% do traefik.environment.add_env("TRAEFIK_API_DASHBOARD", "true") %}
  {% do traefik.environment.add_env("TRAEFIK_API_DISABLEDASHBOARDAD", "true") %}
  {% do traefik.environment.add_env("TRAEFIK_ENTRYPOINTS_TRAEFIK_ADDRESS", ":%d"|format(values.network.web_port.port_number)) %}
{% endif %}

{# Web UI HTTP or HTTPS #}
{% if values.network.webui_secure %}
  {% do traefik.environment.add_env("TRAEFIK_API_INSECURE", "false") %}
{% else %}
  {% do traefik.environment.add_env("TRAEFIK_API_INSECURE", "true") %}
{% endif %}

{# EntryPoints #}
{# Check if http proxying is enabled and add entrypoint when nessecary #}
{% if values.network.http_enable %}
  {% do traefik.environment.add_env("TRAEFIK_ENTRYPOINTS_WEB_ADDRESS", ":%d"|format(values.network.http_port.port_number)) %}
{% endif %}

{# Check if https proxying is enabled and add entrypoint when nessecary  #}
{% if values.network.https_enable %}
  {% do traefik.environment.add_env("TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS", ":%d"|format(values.network.https_port.port_number)) %}
  {% do traefik.environment.add_env("TRAEFIK_ENTRYPOINTS_WEBSECURE_HTTP_TLS", "true") %}
{% endif %}

{# Check if https redirection is enabled and add enable https redirection if it is  #}
{% if values.network.https_redirection %}
  {% do traefik.environment.add_env("TRAEFIK_ENTRYPOINTS_WEB_HTTP_REDIRECTIONS_ENTRYPOINT_TO", "websecure") %}
  {% do traefik.environment.add_env("TRAEFIK_ENTRYPOINTS_WEB_HTTP_REDIRECTIONS_ENTRYPOINT_SCHEME", "https") %}
  {% do traefik.environment.add_env("TRAEFIK_ENTRYPOINTS_WEB_HTTP_REDIRECTIONS_ENTRYPOINT_PERMANENT", "true") %}
{% endif %}


{# Challenges #}
{# HTTP Challenge #}
{% if values.network.http_challenge.enabled %}
  {% do traefik.environment.add_env("TRAEFIK_CERTIFICATESRESOLVERS_TRUENASHTTPRESOLVER_ACME_HTTPCHALLENGE", "true") %}
  {% do traefik.environment.add_env("TRAEFIK_CERTIFICATESRESOLVERS_TRUENASHTTPRESOLVER_ACME_HTTPCHALLENGE_ENTRYPOINT", "web") %}
  {% do traefik.environment.add_env("TRAEFIK_CERTIFICATESRESOLVERS_TRUENASHTTPRESOLVER_ACME_EMAIL", values.network.http_challenge.email) %}
  {% do traefik.environment.add_env("TRAEFIK_CERTIFICATESRESOLVERS_TRUENASHTTPRESOLVER_ACME_STORAGE", "%s/http-acme.json"|format(values.consts.storage.acme)) %}
{% endif %}

{# TLS Challenge #}
{% if values.network.tls_challenge.enabled %}
  {% do traefik.environment.add_env("TRAEFIK_CERTIFICATESRESOLVERS_TRUENASTLSRESOLVER_ACME_TLSCHALLENGE", "true") %}
  {% do traefik.environment.add_env("TRAEFIK_CERTIFICATESRESOLVERS_TRUENASTLSRESOLVER_ACME_EMAIL", values.network.tls_challenge.email) %}
  {% do traefik.environment.add_env("TRAEFIK_CERTIFICATESRESOLVERS_TRUENASTLSRESOLVER_ACME_STORAGE", "%s/tls-acme.json"|format(values.consts.storage.acme)) %}
{% endif %}

{# DNS Challenge (Manage the big DNS providers and add capabilities for a custom DNS provider) #}
{% if values.network.dns_challenge.enabled %}
  {% do traefik.environment.add_env("TRAEFIK_CERTIFICATESRESOLVERS_TRUENASDNSRESOLVER_ACME_DNSCHALLENGE", "true") %}
  {% do traefik.environment.add_env("TRAEFIK_CERTIFICATESRESOLVERS_TRUENASDNSRESOLVER_ACME_EMAIL", values.network.dns_challenge.email) %}
  {% do traefik.environment.add_env("TRAEFIK_CERTIFICATESRESOLVERS_TRUENASDNSRESOLVER_ACME_STORAGE", "%s/dns-acme.json"|format(values.consts.storage.acme)) %}
{% endif %}

{# Set dns challenge provider #}
{% if values.network.dns_challenge.provider == "custom" %}
  {% do traefik.environment.add_env("TRAEFIK_CERTIFICATESRESOLVERS_TRUENASDNSRESOLVER_ACME_DNSCHALLENGE_PROVIDER", values.network.dns_challenge.custom.provider) %}
{% else %}
  {% do traefik.environment.add_env("TRAEFIK_CERTIFICATESRESOLVERS_TRUENASDNSRESOLVER_ACME_DNSCHALLENGE_PROVIDER", values.network.dns_challenge.provider) %}
{% endif %}

{# DNS Challenge custom #}
{% if values.network.dns_challenge.enabled and values.network.dns_challenge.provider == "custom" %}
 {# Use custom environment variables #}
{% endif %}

{# DNS Challenge cloudflare #}
{% if values.network.dns_challenge.enabled and values.network.dns_challenge.provider == "cloudflare" %}
  {% do traefik.environment.add_env("CF_DNS_API_TOKEN", values.network.dns_challenge.cloudflare.api_token) %}
{% endif %}


{# Add Ports #}

{# Add conditional ports #}
{# Webui Port #}
{% if values.network.webui_enable and not values.network.https_redirection %}
  {% do traefik.add_port(values.network.web_port) %}
{% endif %}

{# HTTP Proxy Port #}
{% if values.network.http_enable %}
  {% do traefik.add_port(values.network.http_port) %}
{% endif %}

{# HTTPS Proxy Port #}
{% if values.network.https_enable %}
  {% do traefik.add_port(values.network.https_port) %}
{% endif %}

{# Add additional use added ports #}
{% for port in values.network.additional_ports %}
  {% do traefik.add_port(port) %}
{% endfor %}


{# Add Volumes #}
{# Add folder for Certificates #}
{% do traefik.add_storage(values.consts.storage.certs, values.storage.certs) %}

{# Add folder for configuration yaml #}
{% do traefik.add_storage(values.consts.storage.config, values.storage.config) %}

{# Mount Docker Socket #}
{% do traefik.add_docker_socket(read_only=True) %}

{# Add User added Volumes #}
{% for store in values.storage.additional_storage %}
  {% do traefik.add_storage(store.mount_path, store) %}
{% endfor %}


{# Add user added environment variables #}
{% do traefik.environment.add_user_envs(values.additional_envs) %}


{# Add Labels #}
{# Enable traefik in case of webui_secure or proxy_truenas_enabled #}
{% do traefik.labels.add_label("traefik.enable", "true") %}

{# Add conditional labels #}
{# Set Router for secure webui #}
{% if values.network.webui_secure %}
  {% do traefik.labels.add_label("traefik.http.routers.traefik.rule", "Host(`%s`)"|format(values.network.webui_domain)) %}
  {% do traefik.labels.add_label("traefik.http.routers.traefik.entrypoints", "websecure") %}
  {% do traefik.labels.add_label("traefik.http.routers.traefik.service", "api@internal") %}
  {% do traefik.labels.add_label("traefik.docker.network", values.network.webui_docker_network) %}
{% endif %}
{% if values.network.webui_resolver != "none" %}
  {% do traefik.labels.add_label("traefik.http.routers.traefik.tls.certresolver", values.network.webui_resolver) %}
{% endif %}

{# Set router for truenas #}
{% if values.network.proxy_truenas.enabled %}
  {% do traefik.labels.add_label("traefik.http.routers.truenas.rule", "Host(`%s`)"|format(values.network.proxy_truenas.domain)) %}
  {% do traefik.labels.add_label("traefik.http.routers.truenas.entrypoints", "websecure") %}
  {% do traefik.labels.add_label("traefik.http.routers.truenas.service", "truenas") %}
  {% do traefik.labels.add_label("traefik.http.services.truenas.loadbalancer.server.url", "%s://%s:%d"|format(values.network.proxy_truenas.scheme, values.network.proxy_truenas.ipaddress, values.network.proxy_truenas.port_number)) %}
{% endif %}
{% if values.network.proxy_truenas.resolver != "none" %}
  {% do traefik.labels.add_label("traefik.http.routers.truenas.tls.certresolver", values.network.proxy_truenas.resolver) %}
{% endif %}

{# Set Traefik_Network_Connector as second container #}
{% set tnc = tpl.add_container(values.consts.traefik_network_connector_container_name, "tnc_image") %}

{# make container privileged #}
{% do tnc.set_privileged(true) %}

{# Disable Healthcheck #}
{% do tnc.healthcheck.disable() %}

{# Set Environment variables #}
{% do tnc.environment.add_env("TRAEFIK_CONTAINERNAME", values.network.traefik_container_name) %}
{% do tnc.environment.add_env("TRAEFIK_MONITOREDLABEL", "^traefik.enable$") %}

{# Mount Docker Socket to Traefik Network Connector #}
{% do tnc.add_docker_socket(read_only=False) %}




{# Enable webui button in truenas interface #}
{% do tpl.portals.add(values.network.web_port, {"name": "Dashboard", "scheme": "https" if values.network.webui_secure else "http", "host": values.network.webui_domain if values.network.webui_secure else None, "port": 443 if values.network.webui_secure else None}) %}

{{ tpl.render() | tojson }}